//
//  WeiboClient.h
//  PushboxHD
//
//  Created by Xie Hasky on 11-7-23.
//  Copyright 2011年 同济大学. All rights reserved.
//

#import "OAuthHTTPRequest.h"
#import "WBWebDialogViewController.h"
@class WeiboClient;
@class User;
@class SocialFusionViewController;

enum {
    ResetUnreadCountTypeComments = 1,
    ResetUnreadCountTypeReferMe = 2,
    ResetUnreadCountTypeDirectMessage = 3,
    ResetUnreadCountTypeFollowers = 4,
};
static NSString* const AppKey = @"808405667";
static NSString* const AppSecret = @"2e76c5fca5ac0934c4e4e4114455e261";
typedef void (^WCCompletionBlock)(WeiboClient *client);


@protocol WBSessionDelegate;

@interface WeiboClient : NSObject <ASIHTTPRequestDelegate,WBDialogDelegate> {
    BOOL _hasError;
    NSString* _errorDesc;
    int _responseStatusCode;
    id _responseJSONObject;
    WCCompletionBlock _completionBlock;
    
    
    
    
        id<WBSessionDelegate> _sessionDelegate;
    
 //   SocialFusionViewController* _delegate;
}

@property (nonatomic, assign) BOOL hasError;
@property (nonatomic, copy) NSString* errorDesc;

// Status code generated by server side application
@property (nonatomic, assign) int responseStatusCode;

// NSDictionary or NSArray
@property (nonatomic, retain) id responseJSONObject;

- (void)setCompletionBlock:(void (^)(WeiboClient* client))completionBlock;
- (WCCompletionBlock)completionBlock;

// return an autoreleased object, while gets released after one of following calls complete
+ (id)client;

// return true if user already logged in
+ (BOOL)authorized;
+ (void)signout;
+ (NSString *)currentUserID;

- (void)authWithUsername:(NSString *)username password:(NSString *)password autosave:(BOOL)autosave;

- (void)getFriendsTimelineSinceID:(NSString *)sinceID 
                            maxID:(NSString *)maxID 
                   startingAtPage:(int)page 
                            count:(int)count
                          feature:(int)feature;

- (void)getUserTimeline:(NSString *)userID 
				SinceID:(NSString *)sinceID 
                  maxID:(NSString *)maxID 
		 startingAtPage:(int)page 
				  count:(int)count
                feature:(int)feature;

- (void)getCommentsToMeSinceID:(NSString *)sinceID 
                         maxID:(NSString *)maxID 
                          page:(int)page 
                         count:(int)count;

- (void)getCommentsOfStatus:(NSString *)statusID
                       page:(int)page
                      count:(int)count;

- (void)getCommentsAndRepostsCount:(NSArray *)statusIDs;

- (void)getUserWithName:(NSString *)name;


- (void)getFriendsOfUser:(NSString *)userID cursor:(int)cursor count:(int)count;
- (void)getFollowersOfUser:(NSString *)userID cursor:(int)cursor count:(int)count;

- (void)follow:(NSString *)userID;
- (void)unfollow:(NSString *)userID;

- (void)favorite:(NSString *)statusID;
- (void)unFavorite:(NSString *)statusID;

- (void)postStatus:(NSString *)status;
- (void)postStatus:(NSString *)status latitude:(float)lat longitude:(float)lon;
- (void)postStatus:(NSString *)status withImage:(UIImage *)image;
- (void)postStatus:(NSString *)status withImage:(UIImage *)image latitude:(float)lat longitude:(float)lon;

- (void)repost:(NSString *)statusID 
          text:(NSString *)text 
 commentStatus:(BOOL)commentStatus 
 commentOrigin:(BOOL)commentOrigin;

- (void)comment:(NSString *)statusID 
            cid:(NSString *)cid 
           text:(NSString *)text
  commentOrigin:(BOOL)commentOrigin;

- (void)destroyStatus:(NSString *)statusID;

- (void)getFavoritesByPage:(int)page;

- (void)getRelationshipWithUser:(NSString *)userID;

- (void)getUnreadCountSinceStatusID:(NSString *)statusID;
- (void)resetUnreadCount:(int)type;


- (void)getUser:(NSString *)userID;


- (void)authorize:(NSArray *)permissions
         delegate:(id<WBSessionDelegate>)delegate ;
+ (void)setTokenWithString:(NSString *)responseString andID:(NSString*)userID andTime:(int)time;
@end

@protocol WBSessionDelegate <NSObject>

@optional
/**
 * 用户的登录成功后，第三方开发者实现这个方法
 */
- (void)wbDidLogin;

/**
 * 用户退出后调用 第三方开发者实现这个方法
 */
- (void)wbDidLogout;

/**
 *
 */
- (void)wbDidNotLogin:(BOOL)cancelled;

@end
